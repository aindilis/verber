# Here is the design of this system.

# really have to make this more robust - that can handle multiple
# plans, for multiple agents, etc.  right now it only handles one
# guess should have different plan contexts.  Multiple plans,
# i.e. for replanning, etc, should be stored into the context.
# Contingency planning may be done by branching contexts.  Since
# contexts will often be entirely generated, they should equate with
# worldmodels.  at the end of a plan, new things will be true, and
# you could start new contexts there, also for different results

# contexts should be able to copied easily without a lot of data.
# So you can plan in those contexts.  A general purpose cycle
# control planner should be active, perhaps doing adversarial
# planning with the contexts.  there should only be one root to the
# planner

# basic algorithm is this: we want to prune the plans generated by
# these on account of how well they satisfy pse goals.  To do that
# will obviously require theorem proving.  Because from some worlds,
# given the rules the system knows, it will not be possible to get
# to our ideal words.  In other words, our goal is to change the
# worldstate - that is the board so to speak.  we do this by issuing
# plans.  The worldstate changes both intentionally and
# unintentionally.  Unintentional changes are inferred or
# communicated through audience (or CLEAR as when it reads
# something).  Looks like CLEAR ought to read on its own, for
# learning's sake.

# the actual api should be something like this:

# assert (worldfact) or (goal)

# all the time then, they planner should be generating plans that
# ensure that all goals come true.

# it is not enough to plan in depth on certain issues, you must plan
# for all inevitabilities

# now, if its a cycle, we can start a root plan cycle on the cycle
# domain

# otherwise, we can load a single context and add it






okay we want to do a planning cycle, where we plan for the process of
creating the next plan.  at which point should this be done?


We want to be able to adjust the world to how we see it, and then plan
with that.

In other words, we want to be able to alter the world as if time has
passed and certain things have been done

We also want to be able to alter certain things for planning with
uncertainty

Note that for LPG and maybe other systems timed initial literals and
possibly other constructs cannot have new lines.




Here, each file should have a consistent date format, and when domains
are merged, they are resolved to the timing of the including domain