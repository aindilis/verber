;;
;;
;;    -------------------------------------
;;    |                |                  |
;;    |                |      lab         |
;;    |                                   |
;;    |      store        -----   --------|
;;    |                                   |
;;    |                |      NE_room     |
;;    |                |                  |
;;    |------   ---------------   --------|
;;    |                |                  |
;;    |                |                  |
;;    |                .                  |
;;    |    SW_room     .       dep        |
;;    |                |                  |
;;    |                |                  |
;;    -------------------------------------
;;
;;

(define (domain robot_navigation)
  (:types room door)
  (:constants store lab NE_room SW_room dep - room
              d1 d2 d3 - door)
  (:predicates (open_door ?d - door))
  (:functions  (robot_position) - room)

  (:action move_robot_up
     :precondition (or (= (robot_position) SW_room ) 
                       (= (robot_position) dep     )
                       (= (robot_position) NE_room ))
     :effect (and
               (when (= (robot_position) SW_room ) (assign (robot_position) store   ))
               (when (= (robot_position) dep     ) (assign (robot_position) NE_room ))
               (when (= (robot_position) NE_room ) (assign (robot_position) lab     ))))

  (:action move_robot_down
     :precondition (or (= (robot_position) store   ) 
                       (= (robot_position) lab     )
                       (= (robot_position) NE_room ))
     :effect (and
               (when (= (robot_position) store   ) (assign (robot_position) SW_room ))
               (when (= (robot_position) lab     ) (assign (robot_position) NE_room ))
               (when (= (robot_position) NE_room ) (assign (robot_position) dep     ))))

  (:action move_robot_right
     :precondition (or (and (= (robot_position) SW_room ) (open_door d3)) 
                       (and (= (robot_position) store   ) (open_door d2))
                       (and (= (robot_position) store   ) (open_door d1)))
 
     :effect (and
               (when (= (robot_position) SW_room ) (assign (robot_position) dep))
               (when (and (= (robot_position) store) (open_door d1) (open_door d2)) 
                     (oneof 
                        (assign (robot_position) NE_room ) 
                        (assign (robot_position) lab     )))
               (when (and (= (robot_position) store) (open_door d1) (not (open_door d2)))  
                        (assign (robot_position) lab))
               (when (and (= (robot_position) store) (not (open_door d1)) (open_door d2))  
                        (assign (robot_position) NE_room))))


  (:action move_robot_left
     :precondition (or (and (= (robot_position) dep     ) (open_door d3)) 
                       (and (= (robot_position) lab     ) (open_door d1))
                       (and (= (robot_position) NE_room ) (open_door d2)))
     :effect (and
               (when (= (robot_position) dep     ) (assign (robot_position) SW_room ))
               (when (= (robot_position) lab     ) (assign (robot_position) store   ))
               (when (= (robot_position) NE_room ) (assign (robot_position) store   ))))


  (:observation may_move_left - boolean
     (iff (= may_move_left 1)      
               (or (and (= (robot_position) dep     ) (open_door d3)) 
                   (and (= (robot_position) lab     ) (open_door d1))
                   (and (= (robot_position) NE_room ) (open_door d2)))))


  (:observation may_move_right - boolean
     (iff (= may_move_right 1)
                   (or (and (= (robot_position) SW_room ) (open_door d3)) 
                       (and (= (robot_position) store   ) (open_door d2))
                       (and (= (robot_position) store   ) (open_door d1)))))

  (:observation smell - boolean
      (imply (= smell 0) (not (= (robot_position) lab)))
      (imply (= smell 1)      (= (robot_position) lab)))

)


