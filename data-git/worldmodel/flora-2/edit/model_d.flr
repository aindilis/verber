// UTIL_DATE1
date::text_string.

// BASEKB_MISC1
text_string::informational_object.
informational_object::object.
set::informational_object.
collection::object.
stuff::object.

// BASEKB_SPACE1
space::location.
room::space.
officeroom::room.
door::object.
entry_way::space.
stairwell::space.
closet::space.
perimeter_door::door.
bathroom::room.
shower::object.
laundry::object.
landing::space.
laundry_washing_machine::container.
laundry_dryer_machine::container.
building::location.
store::building.
location::object.

// BASEKB_HYGIENE1
shirt::article_of_clothing.
pants::article_of_clothing.

// BASEKB_SECURITY1
lockable_container::container.
locker::lockable_container.

// BASEKB_TOOL1
desk::furniture.
furniture::object.
bed::object.
container::object.
bag::container.
tool::object.
hygiene_tool::tool.
electric_device::object.
battery_powered_device::electric_device.
electric_razor::battery_powered_device.
laptop::battery_powered_device.
computer::electric_device.
outlet::object.
tool::object.

// BASEKB_AGENT1
person::object.

// BASEKB_WORK1
// BASEKB_BIOMAINTENANCE1

// BASEKB_CHORES1
article_of_clothing::laundry.
towel::laundry.
laundry_load::container.
bedding::laundry.

// BASEKB_DEONTIC1
// BASEKB_ECONOMIC1
// BASEKB_FOOD1
mealtype::collection.

// MISC
VerbFunction::VerbAtom.
VerbPredicate::VerbAtom.
// ?X(?Arg1) :- ?X[arg1 ->> ?Arg1]:VerbAtom.
// ?X(?Arg1,?Arg2) :- ?X[arg1 ->> ?Arg1, arg2 ->> ?Arg2]:VerbAtom.
// ?X(?Arg1,?Arg2,?Arg3) :- ?X[arg1 ->> ?Arg1, arg2 ->> ?Arg2, arg3 ->> ?Arg3]:VerbAtom.
// /MISC

// BASEKB_MISC1
dirty[arg1 => object]:VerbPredicate.

// BASEKB_SPACE1
at_location[arg1 => object, arg2 => location]:VerbPredicate.
has_door[arg1 => door, arg2 => location, arg3 => location]:VerbPredicate.
isolated[arg1 => location]:VerbPredicate.
inaccessible[arg1 => location]:VerbPredicate.
closed[arg1 => door]:VerbPredicate.
connected_to[arg1 => space, arg2 => space]:VerbPredicate.

// BASEKB_HYGIENE1
presentable[arg1 => person]:VerbPredicate.
ship_shape:VerbPredicate.
shaved[arg1 => person]:VerbPredicate.
showered[arg1 => person]:VerbPredicate.
acceptable_to_perform_hygiene_actions[arg1 => person, arg2 => location]:VerbPredicate.
wearing[arg1 => person, arg2 => article_of_clothing]:VerbPredicate.

// BASEKB_SECURITY1
locked_door[arg1 => door]:VerbPredicate.
locked_container[arg1 => lockable_container]:VerbPredicate.

// BASEKB_TOOL1
plugged_in[arg1 => electric_device]:VerbPredicate.
is_contained_by[arg1 => object, arg2 => container]:VerbPredicate.
use_is_required[arg1 => object]:VerbPredicate.

// BASEKB_AGENT1
autonomous[arg1 => object]:VerbPredicate.
mobile[arg1 => object]:VerbPredicate.
holding[arg1, arg1 => object]:VerbPredicate.

// BASEKB_WORK1
all_pending_work_accomplished[arg1 => person, arg2 => date]:VerbPredicate.
ready_for_work[arg1 => person]:VerbPredicate.

// BASEKB_BIOMAINTENANCE1
tired[arg1 => person]:VerbPredicate.
exhausted[arg1 => person]:VerbPredicate.

// BASEKB_CHORES1
wet[arg1 => laundry]:VerbPredicate.
location_is_clean[arg1 => location]:VerbPredicate.

// BASEKB_DEONTIC1
has_permission_to_use[arg1 => person, arg2 => object]:VerbPredicate.

// BASEKB_ECONOMIC1
has_fee_for_use[arg1 => object]:VerbPredicate.

// BASEKB_FOOD1


// BASEKB_MISC1
actions:VerbFunction.
total_walking_distance:VerbFunction.
speed[arg1 => object]:VerbFunction.

// BASEKB_SPACE1
quantity[arg1 => collection, arg2 => location]:VerbFunction.

// BASEKB_HYGIENE1
// BASEKB_SECURITY1

// BASEKB_TOOL1
discharge_rate[arg1 => battery_powered_device]:VerbFunction.
charge_rate[arg1 => battery_powered_device]:VerbFunction.
charge_level[arg1 => battery_powered_device]:VerbFunction.

// BASEKB_AGENT1

// BASEKB_WORK1
hours_worked_on_date[arg1 => person, arg2 => date]:VerbFunction.

// BASEKB_BIOMAINTENANCE1
// BASEKB_CHORES1
// BASEKB_DEONTIC1

// BASEKB_ECONOMIC1
cash[arg1 => person]:VerbFunction.
fee_for_use[arg1 => object]:VerbFunction.

// BASEKB_FOOD1
how_filling[arg1 => mealtype, arg2 => person]:VerbFunction.
rate_of_eating[arg1 => person]:VerbFunction.
food_ingested[arg1 => person]:VerbFunction.
hunger_level[arg1 => person]:VerbFunction.

// ;; DERIVED-PREDICATES
// ;; BASEKB_MISC1
// ;; BASEKB_SPACE1
// (:derived (connected-to ?space1 - space ?space2 - space)
// (connected-to ?space2 ?space1))
// (:derived (has-door ?door - door ?space1 - space ?space2 - space)
// (has-door ?door ?space2 ?space1))
// ;; (:derived (at-location ?object - object ?location2 - location)
// ;;  (exists (?location1 - location)
// ;;   (and 
// ;;    (at-location ?object ?location1)
// ;;    (at-location ?location1 ?location2))))
//
// ;; BASEKB_HYGIENE1
// (:derived (presentable ?p - person)
// (and
// (shaved ?p)
// (showered ?p)
// ;; (exists (?s - shirt)
// ;;  (and
// ;;   (not (dirty ?s))
// ;;   (not (wet ?s))
// ;;   (wearing ?p ?s)
// ;;   ))
// ;; (exists (?pa - pants)
// ;;  (and
// ;;   (not (dirty ?pa))
// ;;   (not (wet ?pa))
// ;;   (wearing ?p ?pa)
// ;;   ))
// ))
// (:derived (ship-shape)
// (exists (?p - person ?la - laundry ?r - electric-razor ?t - towel ?l - location)
// (and
// (presentable ?p)
// (at-location ?la ?l)
// (at-location ?r ?l)
// (at-location ?t ?l))))
// (:derived (acceptable-to-perform-hygiene-actions ?p - person ?br - bathroom)
// (has-permission-to-use ?p ?br))
//
// ;; BASEKB_SECURITY1
// ;; BASEKB_TOOL1
// ;; BASEKB_AGENT1
// (:derived (mobile ?ob - object)
// (autonomous ?ob))
// ;; BASEKB_WORK1
// (:derived (ready-for-work ?p - person)
// (and
// (presentable ?p)
// ;; add more conditions here
// (not (exhausted ?p))
// ))
// ;;  (:derived (all-pending-work-accomplished ?p - person ?d - date)
// ;;   (>= (hours-worked-on-date ?p ?d) 8))
//
// ;; BASEKB_BIOMAINTENANCE1
// ;; BASEKB_CHORES1
// ;; BASEKB_DEONTIC1
// ;; BASEKB_ECONOMIC1
// ;; BASEKB_FOOD1
//
// ;; DURATIVE-ACTIONS
// ;; BASEKB_MISC1
// (:durative-action wait
// :parameters (?p - person ?l - location)
// :duration (= ?duration 0.25)
// :condition (and
// (over all (at-location ?p ?l))
// )
// :effect (and 
// (at end (at-location ?p ?l))
// )
// )
//
// ;; BASEKB_SPACE1
// ;; BASEKB_HYGIENE1
// (:durative-action shave
// :parameters (?r - electric-razor ?p - person ?l - location)
// :duration (= ?duration 0.25)
// :condition (and 
// (over all (holding ?p ?r))
// (over all (acceptable-to-perform-hygiene-actions ?p ?l))
// (at start (>= (charge-level ?r) 0.25))
// (over all (at-location ?p ?l))
// )
// :effect (and 
// (at end (shaved ?p))
// (at end (assign (charge-level ?r) (- (charge-level ?r) 0.25)))
// (at end (assign (actions) (+ (actions) 1)))
// )
// )
// (:durative-action shower
// :parameters (?p - person ?t - towel ?s - shower ?l - location)
// :duration (= ?duration 1)
// :condition (and
// (at start (at-location ?p ?l))
// (over all (at-location ?s ?l))
// (at start (use-is-required ?t))
// (over all (not (exists (?o - object) (holding ?p ?o))))
// )
// :effect (and 
// (at end (showered ?p))
// (at end (assign (actions) (+ (actions) 1)))
// (at end (not (use-is-required ?t)))
// )
// )
//
// ;; BASEKB_SECURITY1
// (:durative-action lock-container
// :parameters (?p - person ?lo - lockable-container ?l - location)
// :duration (= ?duration 0.1)
// :condition (and
// (at start (not (locked-container ?lo)))
// (at start (at-location ?p ?l))
// (at start (at-location ?lo ?l))
// )
// :effect (and
// (at end (locked-container ?lo))
// (at end (assign (actions) (+ (actions) 1)))
// )
// )
// (:durative-action lock-door
// :parameters (?p - person ?d - door ?l1 - location ?l2 - location)
// :duration (= ?duration 0.1)
// :condition (and
// (at start (not (locked-door ?d)))
// (at start (closed ?d))
// (at start (at-location ?p ?l1))
// (at start (has-door ?d ?l1 ?l2))
// )
// :effect (and
// (at end (locked-door ?d))
// (at end (assign (actions) (+ (actions) 1)))
// )
// )
//
// (:durative-action unlock-container
// :parameters (?p - person ?lo - lockable-container ?l - location)
// :duration (= ?duration 0.1)
// :condition (and
// (at start (locked-container ?lo))
// (at start (at-location ?p ?l))
// (at start (at-location ?lo ?l))
// )
// :effect (and
// (at end (not (locked-container ?lo)))
// (at end (assign (actions) (+ (actions) 1)))
// )
// )
//
// (:durative-action unlock-door
// :parameters (?p - person ?d - door ?l1 - location ?l2 - location)
// :duration (= ?duration 0.1)
// :condition (and
// (at start (locked-door ?d))
// (at start (at-location ?p ?l1))
// (at start (has-door ?d ?l1 ?l2))
// )
// :effect (and
// (at end (not (locked-door ?d)))
// (at end (assign (actions) (+ (actions) 1)))
// )
// )
//
// ;; BASEKB_TOOL1
// (:durative-action load
// :parameters (?p - person ?ob - object ?lo - container ?l - location)
// :duration (= ?duration 0.1)
// :condition (and
// (over all (mobile ?ob))
// (over all 
// (forall (?lc - lockable-container)
// (not 
// (and
// (= ?lc ?lo)
// (locked-container ?lc)
// ))))
// (at start (at-location ?p ?l))
// (at start (at-location ?ob ?l))
// (at start (at-location ?lo ?l))
// )
// :effect (and
// (at end (is-contained-by ?ob ?lo))
// (at end (not (at-location ?ob ?l)))
// (at end (assign (actions) (+ (actions) 1)))
// )
// )
// (:durative-action plug-in
// :parameters (?p - person ?b - battery-powered-device ?o - outlet ?l - location)
// :duration (= ?duration 0.1)
// :condition (and
// (over all (at-location ?p ?l))
// (over all (at-location ?o ?l))
// (over all (at-location ?b ?l))
// (over all (not (exists (?co - lockable-container)
// (is-contained-by ?b ?co))))
// ;; (over all (not (mobile ?b)))
// )
// :effect (and
// (at end (plugged-in ?b))
// )
// )
//
// (:durative-action unplug
// :parameters (?p - person ?b - battery-powered-device ?o - outlet ?l - location)
// :duration (= ?duration 0.1)
// :condition (and
// (at start (plugged-in ?b))
// )
// :effect (and
// (at end (not (plugged-in ?b)))
// ;; (at end (mobile ?b))
// )
// )
//
//
// (:durative-action unload
// :parameters (?p - person ?ob - object ?lo - lockable-container ?l - location)
// :duration (= ?duration 0.1)
// :condition (and
// (over all (mobile ?ob))
// (over all 
// (forall (?lc - lockable-container)
// (not 
// (and
// (= ?lc ?lo)
// (locked-container ?lc)
// ))))
// (at start (is-contained-by ?ob ?lo))
// (at start (at-location ?lo ?l))
// (at start (at-location ?p ?l))
// )
// :effect (and
// (at end (not (is-contained-by ?ob ?lo)))
// (at end (at-location ?ob ?l))
// (at end (assign (actions) (+ (actions) 1)))
// )
// )
//
// (:durative-action charge-fully
// :parameters (?b - battery-powered-device ?o - outlet ?p - person ?l - location)
// :duration (= ?duration (/ (- 1 (charge-level ?b)) (charge-rate ?b)))
// :condition (and
// (at start (at-location ?p ?l))
// (over all (at-location ?o ?l))
// (over all (at-location ?b ?l))
// )
// :effect (and 
// (at end (assign (charge-level ?b) 1))
// (at end (assign (actions) (+ (actions) 1)))
// )
// )
//
// (:durative-action arm
// :parameters (?p - person ?o - object ?l - location)
// :duration (= ?duration 0)
// :condition (and
// (at start (at-location ?p ?l))
// (at start (at-location ?o ?l))
// (at start (mobile ?o))
// )
// :effect (and 
// (at end (use-is-required ?o))
// )
// )
//
// (:durative-action use-object
// :parameters (?p - person ?o - object ?l - location)
// :duration (= ?duration 1)
// :condition (and
// (over all (at-location ?p ?l))
// (over all (at-location ?o ?l))
// )
// :effect (and 
// (at end 
// (not (use-is-required ?o)))
// (at end (assign (actions) (+ (actions) 1)))
// )
// )
//
// ;; BASEKB_AGENT1
// (:durative-action pick-up
// :parameters (?ob0 - object ?ob1 - object ?l - location)
// :duration (= ?duration 0.1)
// :condition (and
// (over all (autonomous ?ob0))
// (over all (mobile ?ob1))
// (over all (at-location ?ob0 ?l))
// (at start (at-location ?ob1 ?l))
// )
// :effect (and
// (at end (holding ?ob0 ?ob1))
// (at end (not (at-location ?ob1 ?l)))
// (at end (assign (actions) (+ (actions) 1)))
// )
// )
// (:durative-action set-down
// :parameters (?ob0 - object ?ob1 - object ?l - location)
// :duration (= ?duration 0.1)
// :condition (and 
// (over all (autonomous ?ob0))
// (at start (holding ?ob0 ?ob1))
// (over all (at-location ?ob0 ?l))
// )
// :effect (and
// (at end (not (holding ?ob0 ?ob1)))
// (at end (at-location ?ob1 ?l))
// (at end (assign (actions) (+ (actions) 1)))
// )
// ) 
// (:durative-action move
// :parameters (?ob0 - object ?l0 ?l1 - location)
// :duration (= ?duration 0.15)
// :condition (and
// (over all (autonomous ?ob0))
// (at start (at-location ?ob0 ?l0))
// (at start (not (inaccessible ?l0)))
// (at end (not (inaccessible ?l1)))
// (at end (not (exists (?lo - lockable-container)
// (not (locked-container ?lo)))))
// )
// :effect (and
// (at end (not (at-location ?ob0 ?l0)))
// (at end (at-location ?ob0 ?l1))
// (at end (assign (actions) (+ (actions) 1)))
// (at end (assign (total-walking-distance)
// (+ (total-walking-distance) 1)))
// )
// )
//
// ;; BASEKB_WORK1
// (:durative-action work-fifteen-minutes
// :parameters (?p - person ?c - computer ?o - officeroom ?d - date)
// :duration (= ?duration 0.25)
// :condition (and
// (over all (ready-for-work ?p))
// ;; (over all (not (use-is-required finger-clippers)))
// (over all (at-location ?p ?o))
// (over all (at-location ?c ?o))
// ;; (over all (or (plugged-in ?c)
// ;; (>= (charge-level ?c) 0.5)))
// (over all (not (exhausted ?p)))
// (over all (and
// (today ?d)
// (workday ?d)))
// (over all (<= (hours-worked-on-date ?p ?d) 10))
// (over all (<= (food-ingested ?p) 0))
// ;; (over all (<= (hunger-level ?p) 0.25))
// )
//
// :effect (and 
// (at end (assign (hours-worked-on-date ?p ?d) (+ (hours-worked-on-date ?p ?d) 0.25)))
// (at end (assign (actions) (+ (actions) 1)))
// )
// )
//
// ;; BASEKB_BIOMAINTENANCE1
// (:durative-action sleep
// :parameters (?p - person ?b - bed ?l - location)
// :duration (= ?duration 3)
// :condition (and
// (over all (at-location ?p ?l))
// (over all (at-location ?b ?l))
// (over all (not (exists (?o - object) (holding ?p ?o))))
// (at start (isolated ?l))
// )
// :effect (and 
// (at end (not (exhausted ?p)))
// (at end (not (tired ?p)))
// (at end (assign (actions) (+ (actions) 1)))
// )
// )
// (:durative-action eat
// :parameters (?p - person ?m - mealtype ?l - location)
// :duration (= ?duration (/ (how-filling ?m ?p) (rate-of-eating ?p)))
// :condition (and
// (at start (>= (quantity ?m ?l) 1))
// (at start (at-location ?p ?l))
// ;; (at start (prepared ?m))
// )
// :effect (and 
// (at end (assign (hunger-level ?p) (- (hunger-level ?p) (how-filling ?m ?p))))
// (at end (assign (food-ingested ?p) (+ (food-ingested ?p) (how-filling ?m ?p))))
// (at end (assign (quantity ?m ?l) (- (quantity ?m ?l) 1)))
// (at end (assign (actions) (+ (actions) 1)))
// )
// )
// (:durative-action use-the-restroom
// :parameters (?p - person ?br - bathroom)
// :duration (= ?duration 0.25)
// :condition (and
// (over all (acceptable-to-perform-hygiene-actions ?p ?br))
// (over all (at-location ?p ?br))
// (at start (autonomous ?p))
// )
// :effect (and 
// (at end (not (autonomous ?p)))
// )
// )
//
// ;; BASEKB_CHORES1
// (:durative-action wash-laundry-load
// :parameters (?p - person ?w - laundry-washing-machine ?l - location ?ll - laundry-load ?la1 ?la2 ?la3 - laundry)
// :duration (= ?duration 0.75)
// :condition (and
// (at start (at-location ?p ?l))
// (at start (at-location ?ll ?l))
// (at start (at-location ?w ?l))
// (over all (is-contained-by ?la1 ?ll))
// (over all (is-contained-by ?la2 ?ll))
// (over all (is-contained-by ?la3 ?ll))
// (at start (dirty ?la1))
// (at start (dirty ?la2))
// (at start (dirty ?la3))
// (at start (>= (cash ?p) (fee-for-use ?w)))
// (over all (is-contained-by ?ll ?w))
// )
// :effect (and 
// (at end (and
// (not (dirty ?la1))
// (not (dirty ?la2))
// (not (dirty ?la3))
// (wet ?la1)
// (wet ?la2)
// (wet ?la3)
// ))
// (at end (decrease (cash ?p) (fee-for-use ?w)))
// (at end (assign (actions) (+ (actions) 1)))
// )
// )
//
// (:durative-action dry-laundry-load
// :parameters (?p - person ?d - laundry-dryer-machine ?l - location ?ll - laundry-load ?la1 ?la2 ?la3 - laundry)
// :duration (= ?duration 0.75)
// :condition (and
// (at start (at-location ?p ?l))
// (at start (at-location ?ll ?l))
// (at start (at-location ?d ?l))
// (over all (is-contained-by ?la1 ?ll))
// (over all (is-contained-by ?la2 ?ll))
// (over all (is-contained-by ?la3 ?ll))
// (at start (wet ?la1))
// (at start (wet ?la2))
// (at start (wet ?la3))
// (at start (>= (cash ?p) (fee-for-use ?d)))
// (over all (is-contained-by ?ll ?d))
// )
// :effect (and 
// (at end (and
// (not (wet ?la1))
// (not (wet ?la2))
// (not (wet ?la3))
// ))
// (at end (decrease (cash ?p) (fee-for-use ?d)))
// (at end (assign (actions) (+ (actions) 1)))
// )
// )
// (:durative-action clean-location
// :parameters (?p - person ?l - location)
// :duration (= ?duration 0.25)
// :condition (and
// (over all (at-location ?p ?l))
// )
// :effect (and 
// (at end (not (dirty ?l)))
// )
// )
// ;; (:durative-action take-out-the-trash
// ;;  :parameters (?p - person ?date - date)
// ;;  :duration (= ?duration 0.25)
// ;;  :condition (and
// ;; 	      (over all (today ?date))
// ;; 	      (over all (day-of-week ?date Saturday))
// ;; 	      )
// ;;  :effect (and 
// ;; 	   )
// ;;  )
//
// ;; (:durative-action wash-laundry-load
// ;;  :parameters (?p - person ?ll - laundry-load ?w - laundry-washing-machine ?l - location)
// ;;  :duration (= ?duration 0.75)
// ;;  :condition (and
// ;; 	      (at start (at-location ?p ?l))
// ;; 	      (at start (at-location ?ll ?l))
// ;; 	      (at start (at-location ?w ?l))
// ;; 	      (at start (forall (?la - laundry)
// ;; 			 (imply
// ;; 			  (is-contained-by ?la ?ll)
// ;; 			  (dirty ?la))))
// ;; 	      (at start (imply (has-fee-for-use ?w) (>= (cash ?p) (fee-for-use ?w))))
// ;; 	      (over all (is-contained-by ?ll ?w))
// ;; 	      )
// ;;  :effect (and 
// ;; 	   ;; (at end (forall (?la - laundry) 
// ;; 	   ;; 	    (when (and (is-contained-by ?la ?ll))
// ;; 	   ;; 	     (and (wet ?la)))))
// ;; 	   ;; (at end (when (and (has-fee-for-use ?w))
// ;; 	   ;; 	    (and (decrease (cash ?p) (fee-for-use ?w)))))
// ;; 	   (at end (assign (actions) (+ (actions) 1)))
// ;; 	   )
// ;;  )
//
// ;; (:durative-action dry-laundry-load
// ;;  :parameters (?p - person ?ll - laundry-load ?d - laundry-dryer-machine ?l - location)
// ;;  :duration (= ?duration 1.25)
// ;;  :condition (and
// ;; 	      (at start (at-location ?p ?l))
// ;; 	      (at start (at-location ?ll ?l))
// ;; 	      (at start (at-location ?d ?l))
// ;; 	      (at start (forall (?la - laundry)
// ;; 			 (imply
// ;; 			  (is-contained-by ?la ?ll)
// ;; 			  (wet ?la))))
// ;; 	      (at start (imply (has-fee-for-use ?d) (>= (cash ?p) (fee-for-use ?d))))
// ;; 	      (over all (is-contained-by ?ll ?d))
// ;; 	      )
// ;;  :effect (and 
// ;; 	   ;; (at end (forall (?la - laundry) 
// ;; 	   ;; 	    (when (is-contained-by ?la ?ll)
// ;; 	   ;; 	     (not (dirty ?la)))))
// ;; 	   ;; (at end (when (has-fee-for-use ?d)
// ;; 	   ;; 	    (decrease (cash ?p) (fee-for-use ?d))))
// ;; 	   (at end (assign (actions) (+ (actions) 1)))
// ;; 	   )
// ;;  )
//
// ;; BASEKB_DEONTIC1
// ;; BASEKB_ECONOMIC1
// ;; BASEKB_FOOD1
// )
//
//
// ;; (total-time)
