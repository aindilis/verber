(define (domain household)

 (:requirements :negative-preconditions :conditional-effects
  :equality :typing :fluents :durative-actions
  :derived-predicates)

 (:types 
  person - agent
  agent residence vehicle tool - object
  object physicalLocation - thing
  modeOfTransportation - category
  )

 (:predicates
  (location ?o - object ?l - physicalLocation)
  (mobile ?ob - object)
  (holding ?a - agent ?o - object)
  )

 (:functions
  (travel-distance ?m - modeOfTransportation ?l0 ?l1 - physicalLocation)
  (travel-duration ?m - modeOfTransportation ?l0 ?l1 - physicalLocation)
  )

 (:durative-action travel
  :parameters (?a - agent ?l0 ?l1 - physicalLocation)
  :duration (= ?duration (travel-duration walking ?l0 ?l1))
  :condition (and
	      (over all (autonomous ?a))
	      (at start (location ?a ?l0))
	      )
  :effect (and
	   (at end (not (location ?a ?l0)))
	   (at end (location ?a ?l1))
	   )
  )

 (:durative-action pick-up
  :parameters (?a - agent ?o - object ?l - physicalLocation)
  :duration (= ?duration 0.1)
  :condition (and
	      (over all (autonomous ?a))
	      (over all (mobile ?o))
	      (at start (not (holding ?a ?o)))
	      (at start (location ?a ?l))
	      (at start (location ?o ?l))
	      )
  :effect (and
	   (at end (holding ?a ?o))
	   )
  )

 (:durative-action carry
  :parameters (?a - agent ?o - object ?l0 ?l1 - physicalLocation)
  :duration (= ?duration (travel-duration walking ?l0 ?l1))
  :condition (and
	      (over all (autonomous ?a))
	      (over all (mobile ?o))
	      (over all (holding ?a ?o))
	      (at start (location ?a ?l0))
	      (at start (location ?o ?l0))
	      )
  :effect (and
	   (at end (not (location ?a ?l0)))
	   (at end (not (location ?o ?l0)))

	   (at end (location ?a ?l1))
	   (at end (location ?o ?l1))
	   )
  )

 (:durative-action drive
  :parameters (?a - agent ?v - vehicle ?l0 ?l1 - physicalLocation)
  :duration (= ?duration (travel-duration driving ?l0 ?l1))
  :condition (and
	      (over all (autonomous ?a))
	      (over all (mobile ?v))
	      (at start (location ?a ?l0))
	      (at start (location ?v ?l0))
	      )
  :effect (and
	   (at end (not (location ?a ?l0)))
	   (at end (not (location ?v ?l0)))
	   (at end (location ?a ?l1))
	   (at end (location ?v ?l1))
	   )
  )
 )